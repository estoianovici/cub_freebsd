Index: autogen.sh
===================================================================
--- autogen.sh	(revision 64720)
+++ autogen.sh	(working copy)
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/usr/local/bin/bash
 
 srcdir=`dirname $0`
 test -z "$srcdir" && srcdir=.
Index: configure.ac
===================================================================
--- configure.ac	(revision 64720)
+++ configure.ac	(working copy)
@@ -63,6 +63,23 @@
 	*)		;;
 esac
 
+#handle __WORDSIZE macro
+case $SYSTEM_TYPE in
+	*bsd*)
+	case "$build_cpu" in
+		i?86)
+		AC_DEFINE([__WORDSIZE], [32], [this is a 32 platform])
+		;;
+		x86_64|amd64)
+		AC_DEFINE([__WORDSIZE], [64], [this is a 64 platform])
+		;;
+		*)
+		;;
+	esac
+	;;
+	*)
+	;;
+esac
 # Checks bit model feature.
 AC_ARG_ENABLE([64bit],
 	[AS_HELP_STRING([--enable-64bit],
@@ -186,7 +203,7 @@
 
 # Checks for system functions for which we have replacements.
 AC_REPLACE_FUNCS([vasprintf asprintf strdup strlcpy strlcat \
-		  getopt getopt_long dirname basename])
+		  getopt getopt_long dirname basename basename_r])
 
 # Check gethostbyname_r function
 AC_MSG_CHECKING([for glibc gethostbyname_r])
@@ -381,6 +398,8 @@
 			mddir="linux";;
 		solaris*)
 			mddir="solaris";;
+		freebsd*)
+			mddir="freebsd";;
 		*)
 			mddir=""
 	esac
Index: external/gc6.7/include/private/gcconfig.h
===================================================================
--- external/gc6.7/include/private/gcconfig.h	(revision 64720)
+++ external/gc6.7/include/private/gcconfig.h	(working copy)
@@ -327,6 +327,10 @@
 #   define I386
 #   define mach_type_known
 # endif
+# if defined(FREEBSD) && defined(__x86_64__)
+#    define X86_64
+#    define mach_type_known
+# endif
 # if defined(__NetBSD__) && (defined(i386) || defined(__i386__))
 #   define I386
 #   define mach_type_known
@@ -1993,6 +1997,23 @@
 #	    define PREFETCH_FOR_WRITE(x) __builtin_prefetch((x), 1)
 #	endif
 #   endif
+#	ifdef FREEBSD
+#		define OS_TYPE "FREEBSD"
+#		define FREEBSD_STACKBOTTOM
+#       ifdef __ELF__
+#     		define DYNAMIC_LOADING
+#	     	ifdef UNDEFINED	/* includes ro data */
+	       		extern int _etext[];
+#              	define DATASTART ((ptr_t)((((word) (_etext)) + 0xfff) & ~0xfff))
+#	     	endif
+#	     	define SEARCH_FOR_DATA_START
+	     	extern int _end[];
+#	     	define DATAEND (_end)
+#		else
+	    	extern int etext[];
+#           define DATASTART ((ptr_t)((((word) (etext)) + 0xfff) & ~0xfff))
+#       endif
+#	endif
 #   ifdef NETBSD
 #	define OS_TYPE "NETBSD"
 #	ifdef __ELF__
Index: external/libedit-20100424-3.0/src/vi.c
===================================================================
--- external/libedit-20100424-3.0/src/vi.c	(revision 64720)
+++ external/libedit-20100424-3.0/src/vi.c	(working copy)
@@ -918,14 +918,14 @@
  * NB: posix implies that we should enter insert mode, however
  * this is against historical precedent...
  */
-#ifdef __weak_reference
+#if defined(__weak_reference) && !defined(__FreeBSD__)
 extern char *get_alias_text(const char *) __weak_reference(get_alias_text);
 #endif
 protected el_action_t
 /*ARGSUSED*/
 vi_alias(EditLine *el, Int c)
 {
-#ifdef __weak_reference
+#if defined(_weak_reference) && !defined(__FreeBSD__)
 	char alias_name[3];
 	char *alias_text;
 
Index: external/libregex38a/include/regex38a.h
===================================================================
--- external/libregex38a/include/regex38a.h	(revision 64720)
+++ external/libregex38a/include/regex38a.h	(working copy)
@@ -1,22 +1,28 @@
-#ifndef _REGEX_H_
-#define	_REGEX_H_	/* never again */
+#ifndef _CUB_REGEX_H_
+#define	_CUB_REGEX_H_	/* never again */
 /* ========= begin header generated by ./mkh ========= */
+#include <sys/types.h>
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /* === regex2.h === */
 typedef off_t cub_regoff_t;
-typedef struct {
+
+typedef struct CUB_REGEX cub_regex_t;
+typedef struct CUB_REGMATCH cub_regmatch_t;
+
+struct CUB_REGEX{
 	int re_magic;
 	size_t re_nsub;		/* number of parenthesized subexpressions */
 	const char *re_endp;	/* end pointer for CUB_REG_PEND */
 	struct cub_re_guts *re_g;	/* none of your business :-) */
-} cub_regex_t;
-typedef struct {
+};
+
+typedef struct CUB_REGMATCH{
 	cub_regoff_t rm_so;		/* start of match */
 	cub_regoff_t rm_eo;		/* end of match */
-} cub_regmatch_t;
+};
 
 
 /* === regcomp.c === */
Index: external/mysqlclient/configure.gnu
===================================================================
--- external/mysqlclient/configure.gnu	(revision 64720)
+++ external/mysqlclient/configure.gnu	(working copy)
@@ -27,6 +27,8 @@
 case $SYSTEM_TYPE in
   *linux*) 
     ;;
+  *freebsd*) 
+    ;;
   *)
     BIT_TYPE=0
     ;;
Index: external/oracleclient/configure.gnu
===================================================================
--- external/oracleclient/configure.gnu	(revision 64720)
+++ external/oracleclient/configure.gnu	(working copy)
@@ -27,6 +27,8 @@
 case $SYSTEM_TYPE in
   *linux*) 
     ;;
+  *freebsd*) 
+    ;;
   *)
     BIT_TYPE=0
     ;;
Index: src/base/dynamic_array.c
===================================================================
--- src/base/dynamic_array.c	(revision 64720)
+++ src/base/dynamic_array.c	(working copy)
@@ -22,7 +22,11 @@
  */
 
 #include <string.h>
+#if __STDC__
+#include <stdlib.h>
+#else
 #include <malloc.h>
+#endif
 
 #include "error_code.h"
 #include "dynamic_array.h"
Index: src/base/dynamic_load.c
===================================================================
--- src/base/dynamic_load.c	(revision 64720)
+++ src/base/dynamic_load.c	(working copy)
@@ -24,14 +24,13 @@
 #ident "$Id$"
 
 #include "config.h"
-
-#if !defined(SOLARIS) && !defined(LINUX)
+#if !defined(SOLARIS) && !defined(LINUX) && !defined(__FreeBSD__)
 #include <a.out.h>
 #if defined(sun) || defined(sparc)
 #include <sys/mman.h>		/* for mprotect() */
 #include <malloc.h>		/* for valloc() */
 #endif /* defined(sun) || defined(sparc) */
-#endif /* !(SOLARIS) && !(LINUX) */
+#endif /* !(SOLARIS) && !(LINUX) && !(__FreeBSD__) */
 #include <sys/types.h>
 #include <signal.h>
 #include <unistd.h>
@@ -171,14 +170,14 @@
 				   as the daemon to scavenge tmpfiles. */
   } daemon;
 
-#if defined (SOLARIS) || defined(HPUX) || defined(LINUX)
+#if defined (SOLARIS) || defined(HPUX) || defined(LINUX) || defined(__FreeBSD__)
   struct
   {
     void **handles;		/* An array of handles to the shared objects */
     int top;			/* the next handle to be allocated */
     int num;			/* the total number of handles in the array */
   } handler;
-#endif				/* SOLARIS || HPUX || LINUX */
+#endif				/* SOLARIS || HPUX || LINUX || __FreeBSD__ */
 
   struct
   {
@@ -233,6 +232,8 @@
 /* this space intentionally blank */
 #elif defined(LINUX)
 /* this space intentionally blank */
+#elif defined(__FreeBSD__)
+/* this space intentionally blank */
 #endif /* (sun) || (sparc) */
 
 #ifdef DEBUG
@@ -250,7 +251,7 @@
 static int dl_is_valid_image_file (DYNAMIC_LOADER *);
 static int dl_resolve_symbol (DYNAMIC_LOADER *, struct nlist *);
 
-#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX) && !defined(__FreeBSD__)
 static void dl_notify_daemon (DYNAMIC_LOADER *);
 static void dl_spawn_daemon (DYNAMIC_LOADER *);
 static void dl_set_pipe_handler (void);
@@ -265,7 +266,7 @@
 				    int lineno);
 static int dl_open_pipe (int *fd, int lineno);
 #endif /* DEBUG */
-#endif /* !(SOLARIS) && !(HPUX) && !(LINUX) */
+#endif /* !(SOLARIS) && !(HPUX) && !(LINUX) && !(__FreeBSD__) */
 
 #if (defined(sun) || defined(sparc)) && !defined(SOLARIS)
 static size_t dl_get_image_file_size (const char *);
@@ -279,7 +280,7 @@
 			 const char **);
 static int dl_load_and_resolve_objects (DYNAMIC_LOADER * const char **,
 					const char **, struct nlist *);
-#elif defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#elif defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 static int dl_load_objects (DYNAMIC_LOADER *, const char **);
 #else /* ((sun) || (sparc)) && !(SOLARIS) */
 #error "Unknown machine type."
@@ -364,7 +365,7 @@
 #endif /* DEBUG */
 
 
-#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX) && !defined(__FreeBSD__)
 /*
  * dl_decipher_waitval() - decipher exit status
  *   return: none
@@ -413,7 +414,7 @@
 #undef wait
 #endif /* __GNUG__ */
 }
-#endif /* !SOLARIS && !HPUX && !LINUX */
+#endif /* !SOLARIS && !HPUX && !LINUX && !__FreeBSD__ */
 
 /*
  * dl_destroy_candidates()
@@ -498,10 +499,10 @@
 	}
       else
 	{
-#if defined (SOLARIS) || defined (HPUX) || defined(LINUX)
+#if defined (SOLARIS) || defined (HPUX) || defined(LINUX) || defined(__FreeBSD__)
 	  this_->archive = false;
 	  this_->size = 0;	/* we rely on dlopen to catch any errors. */
-#else /* SOLARIS || HPUX || LINUX */
+#else /* SOLARIS || HPUX || LINUX || __FreeBSD__ */
 
 #if defined(sun) || defined(sparc) || defined(_AIX)
 #if defined(_AIX)
@@ -542,7 +543,7 @@
 	    }
 #endif /* sun || sparc || _AIX */
 
-#endif /* SOLARIS || HPUX || LINUX || _AIX */
+#endif /* SOLARIS || HPUX || LINUX || _AIX || __FreeBSD__ */
 	}
 
       CLOSE (fd);
@@ -609,7 +610,7 @@
 
   this_->daemon.daemon_fd = DAEMON_NOT_SPAWNED;
 
-#if defined (SOLARIS) || defined(HPUX) || defined(LINUX)
+#if defined (SOLARIS) || defined(HPUX) || defined(LINUX) || defined(__FreeBSD__)
   this_->handler.handles =
     (void **) malloc (HANDLES_PER_EXTENT * sizeof (void *));
   if (this_->handler.handles == NULL)
@@ -623,7 +624,7 @@
     {
       this_->handler.handles[i] = 0;
     }
-#endif /* SOLARIS || HPUX || LINUX */
+#endif /* SOLARIS || HPUX || LINUX || __FreeBSD__ */
 
   this_->loader.cmd = NULL;
   this_->loader.ptr = NULL;
@@ -640,9 +641,9 @@
     }
 
 #endif /* _AIX */
-#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX) && !defined(__FreeBSD__)
   this_->loader.cmd = DEFAULT_LD_NAME;	/*use the default name. */
-#endif /* !(SOLARIS) && !(HPUX) && !(LINUX) */
+#endif /* !(SOLARIS) && !(HPUX) && !(LINUX) && !(__FreeBSD__) */
 
   if (dl_Errno == NO_ERROR)
     {
@@ -660,7 +661,7 @@
 
   assert (this_ != NULL);
 
-#if defined (SOLARIS) || defined(HPUX) || defined(LINUX)
+#if defined (SOLARIS) || defined(HPUX) || defined(LINUX) || defined(__FreeBSD__)
   for (i = 0; i < this_->handler.top; i++)
     {
 #if defined(HPUX)
@@ -671,7 +672,7 @@
     }
   free_and_init (this_->handler.handles);
   this_->handler.top = this_->handler.num = 0;
-#endif /* SOLARIS || HPUX || LINUX */
+#endif /* SOLARIS || HPUX || LINUX || __FreeBSD__ */
 
   for (i = 0, tbl_size = FNAME_TBL_SIZE; i < tbl_size; i++)
     {
@@ -698,7 +699,7 @@
       free_and_init (this_->loader.ptr);
     }
 
-#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX) && !defined(__FreeBSD__)
   if (!this_->virgin)
     {
       (void) unlink (this_->image_file);
@@ -710,7 +711,7 @@
 #if defined(AIX)
   free_and_init (this->orig_image_file);
 #endif /* AIX */
-#endif /* !SOLARIS && !HPUX && !LINUX */
+#endif /* !SOLARIS && !HPUX && !LINUX && !__FreeBSD__ */
 
   if (this_->daemon.daemon_fd >= 0)
     {
@@ -927,7 +928,7 @@
     }
 }
 
-#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX) && !defined(__FreeBSD__)
 /*
  * dl_parse_extra_options() - Break up a string of options into a vector
  *   return: options vector
@@ -975,9 +976,9 @@
   *num_options = i;
   return option_vec;
 }
-#endif /* !SOLARIS && !HPUX && !LINUX */
+#endif /* !SOLARIS && !HPUX && !LINUX && !__FreeBSD__ */
 
-#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(HPUX) && !defined(LINUX) && !defined(__FreeBSD__)
 /*
  * dl_link_file() - Builds up a "command line" which is then forked via execv()
  *   return: Zero on success, non-zero on failure
@@ -1321,7 +1322,7 @@
 
   return dl_Errno;
 }
-#endif /* !SOLARIS && !HPUX && && !LINUX */
+#endif /* !SOLARIS && !HPUX && !LINUX && !__FreeBSD__ */
 
 
 #if (defined(sun) || defined(sparc)) && !defined(SOLARIS)
@@ -1613,12 +1614,12 @@
 static int
 dl_is_valid_image_file (DYNAMIC_LOADER * this_)
 {
-#if defined (SOLARIS) || defined(HPUX) || defined(LINUX)
+#if defined (SOLARIS) || defined(HPUX) || defined(LINUX) || defined(__FreeBSD__)
   return 1;
-#else /* SOLARIS || HPUX || LINUX */
+#else /* SOLARIS || HPUX || LINUX || __FreeBSD__ */
   assert (this_ != NULL);
   return this_->image_file != NULL;
-#endif /* SOLARIS || HPUX || LINUX */
+#endif /* SOLARIS || HPUX || LINUX || __FreeBSD__ */
 }
 
 
@@ -1934,7 +1935,7 @@
 
   return ER_FAILED;
 }
-#elif defined(SOLARIS) || defined(HPUX) || defined(LINUX)
+#elif defined(SOLARIS) || defined(HPUX) || defined(LINUX) || defined(__FreeBSD__)
 /*
  * dl_load_objects() - Validate and load object files
  *   return: Zero on success, non-zero on failure
@@ -2061,7 +2062,7 @@
 
   return ER_FAILED;
 }
-#endif /* (SOLARIS) || (HPUX) || (LINUX) */
+#endif /* (SOLARIS) || (HPUX) || (LINUX) || (__FreeBSD__) */
 
 /*
  * dl_resolve_symbol() - obtain the address of a symbol from a object
@@ -2072,7 +2073,7 @@
 static int
 dl_resolve_symbol (DYNAMIC_LOADER * this_, struct nlist *syms)
 {
-#if defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 
 #if defined(HPUX)
 #define SYMS_NTYPE_NULL		ST_NULL
@@ -2142,9 +2143,9 @@
     }
 
   return NO_ERROR;
-#else /* (HPUX) || (SOLARIS) || (LINUX) */
+#else /* (HPUX) || (SOLARIS) || (LINUX) || (__FreeBSD__) */
   return nlist ((char *) this_->image_file, syms);
-#endif /* (HPUX) || (SOLARIS) || (LINUX) */
+#endif /* (HPUX) || (SOLARIS) || (LINUX) || (__FreeBSD__) */
 }
 
 /*
@@ -2153,13 +2154,13 @@
  *   module_name(in): name of the file whose symbol table should be used
  *                      as the starting point for dynamic loading
  */
-#if !defined (SOLARIS) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(LINUX) && !defined(__FreeBSD__)
 int
 dl_initiate_module (const char *module_name)
-#else /* !(SOLARIS) && !(LINUX) */
+#else /* !(SOLARIS) && !(LINUX) && !(__FreeBSD__) */
 int
 dl_initiate_module (void)
-#endif				/* !(SOLARIS) && !(LINUX) */
+#endif				/* !(SOLARIS) && !(LINUX) && !(__FreeBSD__) */
 {
   const char *image_name = NULL;
 
@@ -2169,14 +2170,14 @@
       return ER_FAILED;
     }
 
-#if !defined (SOLARIS) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(LINUX) && !defined(__FreeBSD__)
   image_name = exec_path (module_name);
   if (image_name == NULL)
     {
       DL_SET_ERROR_WITH_CODE_ONE_ARG (ER_DL_IMAGE, module_name);
       return ER_FAILED;
     }
-#endif /* !SOLARIS && !LINUX */
+#endif /* !SOLARIS && !LINUX && !__FreeBSD__ */
 
   dl_Debug = getenv ("DL_DEBUG") != (int) NULL;
 
@@ -2230,7 +2231,7 @@
   return dl_Errno;
 }
 
-#if defined(sun) || defined(sparc) || defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(sun) || defined(sparc) || defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 /*
  * dl_load_object_module() - loads the named files
  *   return: Zero on success, non-zero on failure.
@@ -2240,14 +2241,14 @@
  *
  * Note: If you feel the need
  */
-#if defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 int
 dl_load_object_module (const char **obj_files, const char **msgp)
-#else /* (HPUX) || (SOLARIS) || (LINUX) */
+#else /* (HPUX) || (SOLARIS) || (LINUX) || (__FreeBSD__) */
 int
 dl_load_object_module (const char **obj_files, const char **msgp,
 		       const char **libs)
-#endif				/* (HPUX) || (SOLARIS) || (LINUX) */
+#endif				/* (HPUX) || (SOLARIS) || (LINUX) || (__FreeBSD__) */
 {
   dl_Errno = NO_ERROR;
 
@@ -2267,7 +2268,7 @@
       DL_SET_ERROR_WITH_CODE (ER_DL_INVALID);
       return ER_FAILED;
     }
-#if defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
   return dl_load_objects (dl_Loader, obj_files);
 #else /* HPUX */
   return dl_load_objects (dl_Loader, obj_files, libs, 0, NULL, DL_RELATIVE);
@@ -2316,7 +2317,7 @@
  *      added to the loader's estimate;
  *      if mode == DL_ABSOLUTE, estimated_size is used as the estimate.
  */
-#if defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 int
 dl_load_object_with_estimate (const char **obj_files, const char **msgp)
 #elif (defined(sun) || defined(sparc)) && !defined(SOLARIS)
@@ -2327,7 +2328,7 @@
 			      const char **libs,
 			      const size_t estimated_size,
 			      enum dl_estimate_mode mode)
-#endif				/* (HPUX) || (SOLARIS) || (LINUX) */
+#endif				/* (HPUX) || (SOLARIS) || (LINUX) || (__FreeBSD__) */
 {
   dl_Errno = NO_ERROR;
 
@@ -2347,12 +2348,12 @@
       DL_SET_ERROR_WITH_CODE (ER_DL_INVALID);
       return ER_FAILED;
     }
-#if defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
   return dl_load_objects (dl_Loader, obj_files);
-#else /* HPUX || SOLARIS || LINUX */
+#else /* HPUX || SOLARIS || LINUX || __FreeBSD__ */
   return dl_load_objects (dl_Loader, obj_files, libs, estimated_size,
 			  actual_size, mode);
-#endif /* HPUX || SOLARIS || LINUX */
+#endif /* HPUX || SOLARIS || LINUX || __FreeBSD__ */
 }
 #endif /* ENABLE_UNUSED_FUNCTION */
 #elif defined(_AIX)
Index: src/base/dynamic_load.h
===================================================================
--- src/base/dynamic_load.h	(revision 64720)
+++ src/base/dynamic_load.h	(working copy)
@@ -31,7 +31,7 @@
 #if defined(SOLARIS)
 #include <dlfcn.h>
 #include <nlist.h>
-#endif /* SOLARIS */
+#endif /* SOLARIS || __FreeBSD__ */
 #if defined(sun)
 #include <nlist.h>
 #endif /* sun */
@@ -46,12 +46,12 @@
 #include <sys/ldr.h>
 #include <nlist.h>
 #endif /* _AIX */
-#if defined(LINUX)
+#if defined(LINUX) || defined(__FreeBSD__)
 #include <dlfcn.h>
 #include <nlist.h>
-#endif /* LINUX */
+#endif /* LINUX || __FreeBSD__ */
 
-#if defined(SOLARIS) || defined(LINUX)
+#if defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 /* the nlist types from a.out.h */
 #if !defined(N_UNDF)
 #define N_UNDF  0x0		/* undefined */
@@ -62,7 +62,7 @@
 #if !defined(N_TEXT)
 #define N_TEXT  0x4		/* text */
 #endif
-#endif /* SOLARIS || LINUX */
+#endif /* SOLARIS || LINUX || __FreeBSD__ */
 
 /* Sun has valloc, HP doesn't.  The VALLOC macro hides this.
    Use free, not free_and_init to free the result of VALLOC. */
@@ -81,31 +81,31 @@
 
 extern int dl_Errno;
 
-#if !defined(LINUX) && !defined(AIX)
+#if !defined(LINUX) && !defined(AIX) && !defined(__FreeBSD__)
 extern const char *sys_errlist[];
-#endif /* !LINUX && !AIX */
+#endif /* !LINUX && !AIX && !__FreeBSD__ */
 
 
-#if !defined(SOLARIS) && !defined(HPUX) && !defined(AIX) && !defined(LINUX)
+#if !defined(SOLARIS) && !defined(HPUX) && !defined(AIX) && !defined(LINUX) && !defined(__FreeBSD__)
 extern int nlist (char *, struct nlist *);
-#endif /* !SOLARIS && !HPUX && !AIX && !LINUX */
+#endif /* !SOLARIS && !HPUX && !AIX && !LINUX && !__FreeBSD__ */
 
-#if !defined (SOLARIS) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(LINUX) && !defined(__FreeBSD__)
 extern int dl_initiate_module (const char *);
-#else /* SOLARIS || LINUX */
+#else /* SOLARIS || LINUX || __FreeBSD__ */
 extern int dl_initiate_module (void);
-#endif /* SOLARIS || LINUX */
+#endif /* SOLARIS || LINUX || __FreeBSD__ */
 
 extern int dl_destroy_module (void);
 
-#if defined (sun) || defined(SOLARIS) || defined(LINUX) || defined(HPUX)
+#if defined (sun) || defined(SOLARIS) || defined(LINUX) || defined(HPUX) || defined(__FreeBSD__)
 extern int dl_resolve_object_symbol (struct nlist *syms);
 #elif defined(_AIX)
 extern int dl_load_and_resolve (const char **,
 				const char **, const char **, struct nlist *);
 #endif /* _AIX */
 
-#if defined(HPUX) || defined(SOLARIS) || defined(LINUX)
+#if defined(HPUX) || defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 #if defined (ENABLE_UNUSED_FUNCTION)
 extern int dl_load_object_with_estimate (const char **obj_files,
 					 const char **msgp);
Index: src/base/porting.c
===================================================================
--- src/base/porting.c	(revision 64720)
+++ src/base/porting.c	(working copy)
@@ -48,6 +48,9 @@
 #include "storage_common.h"
 #endif
 
+#if !defined(HAVE_BASENAME_R)
+static int basename_r (const char *path, char *pathbuf, size_t buflen);
+#endif
 #if defined (WINDOWS)
 /*
  * gettimeofday - Windows port of Unix gettimeofday()
@@ -885,6 +888,17 @@
 #endif /* !HAVE_DIRNAME */
 
 int
+cub_basename_r (const char *path, char *pathbuf, size_t buflen)
+{
+#if !defined(HAVE_BASENAME_R)
+	return basename_r(path, pathbuf, buflen);
+#else
+	return basename_r(path, pathbuf);
+#endif
+}
+
+#if !defined(HAVE_BASENAME_R)
+static int
 basename_r (const char *path, char *pathbuf, size_t buflen)
 {
   const char *endp, *startp;
@@ -932,6 +946,7 @@
   pathbuf[len] = '\0';
   return (int) len;
 }
+#endif
 
 #if !defined(HAVE_BASENAME)
 char *
Index: src/base/porting.h
===================================================================
--- src/base/porting.h	(revision 64720)
+++ src/base/porting.h	(working copy)
@@ -316,7 +316,8 @@
 #if !defined(HAVE_DIRNAME)
 char *dirname (const char *path);
 #endif /* HAVE_DIRNAME */
-extern int basename_r (const char *path, char *pathbuf, size_t buflen);
+/* handle basename_r */
+extern int cub_basename_r (const char *path, char *pathbuf, size_t buflen);
 #if !defined(HAVE_BASENAME)
 extern char *basename (const char *path);
 #endif /* HAVE_BASENAME */
@@ -384,7 +385,7 @@
 		   va_list argptr);
 #endif
 
-#if defined(WINDOWS)
+#if defined(WINDOWS) || defined(__FreeBSD__)
 /* The following structure is used to generate uniformly distributed
  * pseudo-random numbers reentrantly.
  */
@@ -402,7 +403,9 @@
 extern int srand48_r (long int seedval, struct drand48_data *buffer);
 extern int lrand48_r (struct drand48_data *buffer, long int *result);
 extern int drand48_r (struct drand48_data *buffer, double *result);
+#endif
 
+#if defined(WINDWOS)
 extern double round (double d);
 
 typedef struct
@@ -653,4 +656,12 @@
 
 #endif /* WINDOWS */
 
+#ifndef ETIME	/* for FreeBSD */
+#include <sys/timeb.h>
+#include <unistd.h>
+#define ETIME ETIMEDOUT
+#define off64_t off_t
+#define lseek64(filedes, offset, whence) lseek(filedes, offset, whence)
+#endif
+
 #endif /* _PORTING_H_ */
Index: src/broker/broker_config.c
===================================================================
--- src/broker/broker_config.c	(revision 64720)
+++ src/broker/broker_config.c	(working copy)
@@ -845,7 +845,7 @@
   memset (br_info, 0, sizeof (T_BROKER_INFO) * MAX_BROKER_NUM);
 
   get_cubrid_file (FID_CUBRID_BROKER_CONF, default_conf_file_path);
-  basename_r (default_conf_file_path, file_name, PATH_MAX);
+  cub_basename_r (default_conf_file_path, file_name, PATH_MAX);
 
   if (conf_file == NULL)
     {
Index: src/broker/cas_net_buf.h
===================================================================
--- src/broker/cas_net_buf.h	(revision 64720)
+++ src/broker/cas_net_buf.h	(working copy)
@@ -44,7 +44,7 @@
 
 #if (defined(SOLARIS) && !defined(SOLARIS_X86)) || defined(HPUX) || defined(AIX) || defined(PPC_LINUX)
 #define BYTE_ORDER_BIG_ENDIAN
-#elif defined(WINDOWS) || defined(LINUX) || defined(OSF1) || defined(ALPHA_LINUX) || defined(UNIXWARE7) || defined(SOLARIS_X86)
+#elif defined(WINDOWS) || defined(LINUX) || defined(OSF1) || defined(ALPHA_LINUX) || defined(UNIXWARE7) || defined(SOLARIS_X86) || defined(__FreeBSD__)
 #ifdef BYTE_ORDER_BIG_ENDIAN
 #error BYTE_ORDER_BIG_ENDIAN defined
 #endif
Index: src/connection/connection_list_sr.c
===================================================================
--- src/connection/connection_list_sr.c	(revision 64720)
+++ src/connection/connection_list_sr.c	(working copy)
@@ -31,7 +31,7 @@
 #include <poll.h>
 #endif /* !WINDOWS */
 #include <string.h>
-#include <malloc.h>
+#include <stdlib.h>
 #include <memory.h>
 #include <errno.h>
 #include <assert.h>
Index: src/connection/tcp.c
===================================================================
--- src/connection/tcp.c	(revision 64720)
+++ src/connection/tcp.c	(working copy)
@@ -58,9 +58,9 @@
 #if defined(sun)
 #include <sys/sockio.h>
 #endif /* sun */
-#if defined(LINUX)
+#if defined(LINUX) || defined(__FreeBSD__)
 #include <sys/stat.h>
-#endif /* LINUX */
+#endif /* LINUX || __FreeBSD__ */
 #include <netinet/tcp.h>
 #include <assert.h>
 
@@ -796,9 +796,9 @@
    * some operating system does not set the permission for unix domain socket.
    * so a server can't connect to master which is initiated by other user.
    */
-#if defined(LINUX)
+#if defined(LINUX) || defined (__FreeBSD__)
   chmod (pathname, S_IRWXU | S_IRWXG | S_IRWXO);
-#endif /* LINUX */
+#endif /* LINUX || __FreeBSD__ */
 
   if (listen (*sockfd, 5) != 0)
     {
@@ -962,9 +962,9 @@
   struct iovec iov[1];
   struct msghdr msg;
   int pid;
-#if defined(LINUX)
+#if defined(LINUX) || defined(__FreeBSD__)
   static struct cmsghdr *cmptr = NULL;
-#endif /* LINUX */
+#endif /* LINUX || __FreeBSD__ */
 
   iov[0].iov_base = (char *) &req_id;
   iov[0].iov_len = sizeof (unsigned short);
@@ -972,10 +972,10 @@
   msg.msg_iovlen = 1;
   msg.msg_name = (caddr_t) NULL;
   msg.msg_namelen = 0;
-#if !defined(LINUX)
+#if !defined(LINUX) && !defined(__FreeBSD__)
   msg.msg_accrights = (caddr_t) & new_fd;	/* address of descriptor */
   msg.msg_accrightslen = sizeof (new_fd);	/* receive 1 descriptor */
-#else /* not LINUX */
+#else /* not LINUX and not __FreeBSD__ */
   if (cmptr == NULL
       && (cmptr = (struct cmsghdr *) malloc (CONTROLLEN)) == NULL)
     {
@@ -983,7 +983,7 @@
     }
   msg.msg_control = (void *) cmptr;
   msg.msg_controllen = CONTROLLEN;
-#endif /* not LINUX */
+#endif /* not LINUX and not __FreeBSD__ */
 
   rc = recvmsg (fd, &msg, 0);
   if (rc < 0)
@@ -997,9 +997,9 @@
   *rid = ntohs (req_id);
 
   pid = getpid ();
-#if defined(LINUX)
+#if defined(LINUX) || defined (__FreeBSD__)
   new_fd = *(SOCKET *) CMSG_DATA (cmptr);
-#endif /* LINUX */
+#endif /* LINUX || __FreeBSD__ */
 
 #ifdef SYSV
   ioctl (new_fd, SIOCSPGRP, (caddr_t) & pid);
@@ -1025,9 +1025,9 @@
   unsigned short req_id;
   struct iovec iov[1];
   struct msghdr msg;
-#if defined(LINUX)
+#if defined(LINUX) || defined (__FreeBSD__)
   static struct cmsghdr *cmptr = NULL;
-#endif /* LINUX */
+#endif /* LINUX || __FreeBSD__ */
 
   request = htonl (SERVER_START_NEW_CLIENT);
   if (send (server_fd, (char *) &request, sizeof (int), 0) < 0)
@@ -1046,10 +1046,10 @@
   msg.msg_iovlen = 1;
   msg.msg_namelen = 0;
   msg.msg_name = (caddr_t) 0;
-#if !defined(LINUX)
+#if !defined(LINUX) && !defined(__FreeBSD__)
   msg.msg_accrights = (caddr_t) & client_fd;
   msg.msg_accrightslen = sizeof (client_fd);
-#else /* LINUX */
+#else /* LINUX && __FreeBSD__ */
   if (cmptr == NULL
       && (cmptr = (struct cmsghdr *) malloc (CONTROLLEN)) == NULL)
     {
@@ -1061,7 +1061,7 @@
   msg.msg_control = (void *) cmptr;
   msg.msg_controllen = CONTROLLEN;
   *(SOCKET *) CMSG_DATA (cmptr) = client_fd;
-#endif /* LINUX */
+#endif /* LINUX && __FreeBSD__ */
 
   if (sendmsg (server_fd, &msg, 0) < 0)
     {
Index: src/heaplayers/sizethreadheap.h
===================================================================
--- src/heaplayers/sizethreadheap.h	(revision 64720)
+++ src/heaplayers/sizethreadheap.h	(working copy)
@@ -60,6 +60,10 @@
 #include <windows.h>
 #include <process.h>
 #endif
+#if defined(__FreeBSD__)
+#include <sys/types.h>
+#include <unistd.h>
+#endif
 
 template <class SuperHeap>
 inline volatile int
@@ -75,6 +79,9 @@
   // dividing off the 1024 gives us an appropriate thread id.
   return (int) pthread_self() >> 10; // (>> 10 = / 1024)
 #endif
+#if defined(__FreeBSD__)
+  return (int) getpid();
+#endif
 #if defined(__SVR4)
   return (int) lwp_self();
 #endif
Index: src/heaplayers/threadheap.h
===================================================================
--- src/heaplayers/threadheap.h	(revision 64720)
+++ src/heaplayers/threadheap.h	(working copy)
@@ -14,6 +14,10 @@
 extern "C" unsigned int lwp_self(void);
 #endif
 
+#if defined(__FreeBSD__)
+#include <sys/types.h>
+#include <unistd.h>
+#endif
 /*
 
   A ThreadHeap comprises NumHeaps "per-thread" heaps.
@@ -105,6 +109,9 @@
   // dividing off the 1024 gives us an appropriate thread id.
   return (int) pthread_self() >> 10; // (>> 10 = / 1024)
 #endif
+#if defined(__FreeBSD__)
+  return (int) getpid();
+#endif
 #if defined(__SVR4)
   //  printf ("lwp_self = %d\n", (int) lwp_self());
   return (int) lwp_self();
Index: src/heaplayers/util/cpuinfo.h
===================================================================
--- src/heaplayers/util/cpuinfo.h	(revision 64720)
+++ src/heaplayers/util/cpuinfo.h	(working copy)
@@ -48,7 +48,7 @@
 extern "C" int _thr_self(void);
 #endif
 
-#if defined(__linux)
+#if defined(__linux) || defined(__FreeBSD__)
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -210,10 +210,12 @@
   return find_thread(0);
 #elif defined(USE_THREAD_KEYWORD)
   return localThreadId;
-#elif defined(__linux) || defined(PTHREAD_KEYS_MAX)
+#elif defined(__linux) || (defined(PTHREAD_KEYS_MAX) && !defined(__FreeBSD__))
   // Consecutive thread id's in Linux are 1024 apart;
   // dividing off the 1024 gives us an appropriate thread id.
   return (int) pthread_self() >> 10; // >> 20; // FIX ME 10 // (>> 10 = / 1024)
+#elif defined(__FreeBSD__)
+  return (int) getpid();
 #elif defined(POSIX) // FIX ME??
   return (int) pthread_self();
 #elif USE_SPROC
Index: src/object/schema_manager.c
===================================================================
--- src/object/schema_manager.c	(revision 64720)
+++ src/object/schema_manager.c	(working copy)
@@ -216,7 +216,7 @@
 static const char *method_file_extension = ".dll";
 #elif defined (HPUX)
 static const char *method_file_extension = ".sl";
-#elif defined (SOLARIS) || defined(LINUX)
+#elif defined (SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 static const char *method_file_extension = ".so";
 #elif defined(sun) || defined(AIX)
 static const char *method_file_extension = ".o";
@@ -1259,11 +1259,11 @@
  *   commands(in): array of loader commands (NULL terminated)
  */
 
-#if defined (sun) || defined(SOLARIS) || defined(LINUX)
-#if defined(SOLARIS) || defined(LINUX)
+#if defined (sun) || defined(SOLARIS) || defined(LINUX) || defined (__FreeBSD__)
+#if defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 static int
 sm_link_dynamic_methods (METHOD_LINK * links, const char **files)
-#else /* SOLARIS || LINUX */
+#else /* SOLARIS || LINUX || __FreeBSD__ */
 static int
 sm_link_dynamic_methods (METHOD_LINK * links,
 			 const char **files, const char **commands)
@@ -1279,7 +1279,7 @@
   if (error == NO_ERROR && namelist != NULL)
     {
       /* invoke the linker */
-#if defined(SOLARIS) || defined(LINUX)
+#if defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
       status = dl_load_object_module (files, &msg);
 #else /* SOLARIS || LINUX */
       status = dl_load_object_module (files, &msg, commands);
@@ -1769,7 +1769,7 @@
 				    (const char ***) &commands);
   if (error == NO_ERROR)
     {
-#if defined(SOLARIS) || defined(LINUX)
+#if defined(SOLARIS) || defined(LINUX) || (__FreeBSD__)
       error = sm_link_dynamic_methods (links, (const char **) sorted_names);
 #else /* SOLARIS || LINUX */
       error = sm_link_dynamic_methods (links, sorted_names, commands);
@@ -2006,7 +2006,7 @@
 	  names[nfiles] = NULL;
 
 	  /* need to have commands here ! */
-#if defined(SOLARIS) || defined(LINUX)
+#if defined(SOLARIS) || defined(LINUX) || defined(__FreeBSD__)
 	  error =
 	    sm_link_dynamic_methods (total_links, (const char **) names);
 #else /* SOLARIS || LINUX */
Index: src/optimizer/query_graph.c
===================================================================
--- src/optimizer/query_graph.c	(revision 64720)
+++ src/optimizer/query_graph.c	(working copy)
@@ -31,10 +31,15 @@
 #include <stdlib.h>
 #include <stdarg.h>
 #include <math.h>
-#if !defined(WINDOWS)
+
+#if !defined(WINDOWS) && !defined (__FreeBSD__)
 #include <values.h>
 #endif /* !WINDOWS */
 
+#if defined(__FreeBSD__)
+#include <limits.h>
+#endif
+
 #include "error_code.h"
 #include "error_manager.h"
 #include "object_representation.h"
Index: src/optimizer/query_planner.c
===================================================================
--- src/optimizer/query_planner.c	(revision 64720)
+++ src/optimizer/query_planner.c	(working copy)
@@ -28,10 +28,14 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
-#if !defined(WINDOWS)
+#if !defined(WINDOWS) && !defined(__FreeBSD__)
 #include <values.h>
 #endif /* !WINDOWS */
 
+#if defined(__FreeBSD__)
+#include <limits.h>
+#endif
+
 #include "parser.h"
 #include "optimizer.h"
 #include "query_planner.h"
Index: src/query/fetch.c
===================================================================
--- src/query/fetch.c	(revision 64720)
+++ src/query/fetch.c	(working copy)
@@ -32,6 +32,7 @@
 #if !defined(WINDOWS)
 #include <sys/time.h>
 #endif
+#include <stdlib.h>
 
 #include "porting.h"
 #include "error_manager.h"
Index: src/storage/byte_order.h
===================================================================
--- src/storage/byte_order.h	(revision 64720)
+++ src/storage/byte_order.h	(working copy)
@@ -52,12 +52,12 @@
 #define OR_BYTE_ORDER OR_LITTLE_ENDIAN	/* WINDOWS, LINUX, x86_SOLARIS */
 #endif /* HPUX || _AIX || sparc */
 
-#if defined(HPUX) || defined(_AIX) || defined(WINDOWS) || defined(LINUX)
+#if defined(HPUX) || defined(_AIX) || defined(WINDOWS) || defined(LINUX) || defined(__FreeBSD__)
 #define OR_HAVE_NTOHS
 #define OR_HAVE_NTOHL
 #define OR_HAVE_HTONS
 #define OR_HAVE_HTONL
-#endif /* HPUX || _AIX || WINDOWS || LINUX */
+#endif /* HPUX || _AIX || WINDOWS || LINUX || FREEBSD */
 
 
 
Index: src/storage/es_posix.c
===================================================================
--- src/storage/es_posix.c	(revision 64720)
+++ src/storage/es_posix.c	(working copy)
@@ -34,10 +34,14 @@
 #define S_ISDIR(m) ((m) & S_IFDIR)
 #else
 #include <unistd.h>
+#if defined(__FreeBSD__)
+#include <sys/statvfs.h>
+#define O_LARGEFILE 0
+#elif
 #include <sys/vfs.h>
+#endif /* __FreeBSD__ */
 #include <string.h>
 #endif /* !WINDOWS */
-
 #include "porting.h"
 #include "error_manager.h"
 #include "system_parameter.h"
Index: src/storage/file_io.c
===================================================================
--- src/storage/file_io.c	(revision 64720)
+++ src/storage/file_io.c	(working copy)
@@ -44,7 +44,12 @@
 #include <sys/param.h>
 #include <sys/types.h>
 #include <sys/uio.h>
+#ifdef __FreeBSD__
+#include <sys/mount.h>
+#include <sys/statvfs.h>
+#else
 #include <sys/vfs.h>
+#endif /* __FreeBSD__ */
 #endif /* WINDOWS */
 
 #ifdef _AIX
Index: src/storage/page_buffer.c
===================================================================
--- src/storage/page_buffer.c	(revision 64720)
+++ src/storage/page_buffer.c	(working copy)
@@ -304,7 +304,7 @@
   PGBUF_BCB *bcb;		/* pointer to BCB structure */
 #if (__WORDSIZE == 32)
   int dummy;			/* for 8byte align of iopage */
-#elif !defined(LINUX) && !defined(WINDOWS)
+#elif !defined(LINUX) && !defined(WINDOWS) && !defined(__FreeBSD__)
 #error "you must check that iopage is aligned by 8byte !!"
 #endif
   FILEIO_PAGE iopage;		/* The actual buffered io page */
Index: src/transaction/boot_cl.c
===================================================================
--- src/transaction/boot_cl.c	(revision 64720)
+++ src/transaction/boot_cl.c	(working copy)
@@ -497,11 +497,11 @@
    * loader fails, methods will fail when they are invoked
    */
 #if !defined(WINDOWS)
-#if !defined (SOLARIS) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(LINUX) && !defined(__FreeBSD__)
   (void) dl_initiate_module (client_credential->program_name);
-#else /* !SOLARIS && !LINUX */
+#else /* !SOLARIS && !LINUX && !__FreeBSD__ */
   (void) dl_initiate_module ();
-#endif /* !SOLARIS && !LINUX */
+#endif /* !SOLARIS && !LINUX && !__FreeBSD__ */
 #endif /* !WINDOWS */
 
 #if defined(CS_MODE)
@@ -804,11 +804,11 @@
    * loader fails, methods will fail when they are invoked
    */
 #if !defined(WINDOWS)
-#if !defined (SOLARIS) && !defined(LINUX)
+#if !defined (SOLARIS) && !defined(LINUX) && !defined(__FreeBSD__)
   (void) dl_initiate_module (program_name);
-#else /* !SOLARIS && !LINUX */
+#else /* !SOLARIS && !LINUX && !__FreeBSD__ */
   (void) dl_initiate_module ();
-#endif /* !SOLARIS && !LINUX */
+#endif /* !SOLARIS && !LINUX && !__FreeBSD__ */
   dl_initialized = true;
 #endif /* !WINDOWS */
 
Index: src/transaction/log_applier.c
===================================================================
--- src/transaction/log_applier.c	(revision 64720)
+++ src/transaction/log_applier.c	(working copy)
@@ -5669,7 +5669,7 @@
 la_check_mem_size (void)
 {
   unsigned long vsize = 0;
-#if defined(LINUX)
+#if defined(LINUX) || defined(__FreeBSD__)
   FILE *fp;
 
   fp = fopen ("/proc/self/statm", "r");
Index: src/transaction/log_tran_table.c
===================================================================
--- src/transaction/log_tran_table.c	(revision 64720)
+++ src/transaction/log_tran_table.c	(working copy)
@@ -1817,7 +1817,7 @@
 	   LOG_USERNAME_MAX - 1);
   client->db_user[LOG_USERNAME_MAX - 1] = '\0';
   if (program_name == NULL
-      || basename_r (program_name, client->program_name, PATH_MAX) < 0)
+      || cub_basename_r (program_name, client->program_name, PATH_MAX) < 0)
     {
       strncpy (client->program_name, log_Client_id_unknown_string, PATH_MAX);
     }
